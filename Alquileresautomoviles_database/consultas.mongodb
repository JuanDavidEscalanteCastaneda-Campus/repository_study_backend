//1. 
//Recursos: Sql, DTO, JWT

//2.
//Mostrar todos los clientes registrados en la base de datos
use("firstdb");
db.cliente.find();

//3.
//Obtener todos los automóviles disponibles para alquiler
use("firstdb");
db.getCollection("automovil").aggregate([
    {
        $lookup:{
            from:("alquiler"),
            localField:"ID_automovil",
            foreignField:"ID_automovil",
            as:"Alquiler"
        }
    },
    {
        $match: {
            "Alquiler.Estado":"vencido"
        }
    },
    {
        $project: {
           _id: 0,
           "Alquiler._id":0
        }
    }
]);

//4.
//Listar todos los alquileres activos junto con los datos de los clientes relacionados.
use("firstdb");
db.getCollection("alquiler").aggregate([
    {
        $lookup: {
          from: ("cliente"),
          localField: "ID_cliente",
          foreignField: "ID_cliente",
          as: "Cliente"
        }
    },
    {
        $match: {
          Estado:"activo",
        }
    },
    {
        $project:{
            _id:0,
            "Cliente._id":0
        }
    }
]);

//5.
//Mostrar todas las reservas pendientes con los datos del cliente y el automóvil reservado.
use("firstdb");
db.getCollection("alquiler").aggregate([
    {
        $lookup: {
          from: ("cliente"),
          localField: "ID_cliente",
          foreignField: "ID_cliente",
          as: "Cliente"
        }
    },
    {
        $lookup: {
          from: ("automovil"),
          localField: "ID_automovil",
          foreignField: "ID_automovil",
          as: "Automovil"
        }
    },
    {
        $match: {
          Estado:"pendiente",
        }
    },
    {
        $project:{
            _id:0,
            "Cliente._id":0,
            "Automovil._id":0
        }
    }
]);

//6.
//Obtener los detalles del alquiler con el ID_Alquiler específico.
use("firstdb");
db.alquiler.find({"ID_alquiler":2});

//7.
//Listar los empleados con el cargo de "Vendedor".
use("firstdb");
db.getCollection("empleados").aggregate([
    {
        $match: {
            cargo:"vendedor"
        }
    }
]);


//8.
//Mostrar la cantidad total de automóviles disponibles en cada sucursal.
use("firstdb");
db.getCollection("sucursal").aggregate([
    {
        $lookup: {
          from: ("sucursal_automovil"),
          localField: "ID_Sucursal",
          foreignField: "ID_Sucursal",
          as: "Automoviles_disponibles"
        }
    },
    {
        $project:{
            _id:0,
            "Automoviles_disponibles._id":0,
            ID_Sucursal:0,
            "Automoviles_disponibles.ID_Sucursal":0
        }
    }
]);


//9.
//Obtener el costo total de un alquiler específico.
use("firstdb");
db.getCollection("alquiler").aggregate([
    {
        $match: {
            ID_alquiler:2
        }
    },
    {
        $project:{
            _id:0,
            ID_alquiler:0,
            ID_cliente:0,
            ID_automovil:0,
            Fecha_Inicio:0,
            Fecha_Fin:0,
            Estado:0
        }
    }
]);


//10.
//Listar los clientes con el DNI específico.
use("firstdb");
db.cliente.find({"DNI":"vw64e51dv"});


//11.
//Mostrar todos los automóviles con una capacidad mayor a 5 personas. 
use("firstdb");
db.getCollection("automovil").aggregate([
    {
        $match: {
            Capacidad:{$gt:4}
        }
    },
    {
        $project:{
            _id:0,
            
        }
    }
]);


//12.
//Obtener los detalles del alquiler que tiene fecha de inicio en '2023-07-05'.
use("firstdb");
db.alquiler.find({Fecha_Inicio:"2023-07-05"});


//13.
//Listar las reservas pendientes realizadas por un cliente específico.
use("firstdb");
db.getCollection("cliente").aggregate([
    {
        $match: {
            ID_cliente:2
        }
    },
    {
        $lookup: {
          from: ("reserva"),
          localField: "ID_cliente",
          foreignField: "ID_Cliente",
          as: "reservas_pendientes"
        }
    },
    {
        $match: {
          "reservas_pendientes.Estado":"pendiente"
        }
    },
    {
        $project:{
            _id:0,
            "reservas_pendientes._id":0
            
        }
    }
]);


//14.
//Mostrar los empleados con cargo de "Gerente" o "Asistente".
use("firstdb");
db.getCollection("empleados").aggregate([
    {
        $match: {
            cargo:{$in:["gerente","asistente"]}
        }
    },
    {
        $project:{
            _id:0,
            
        }
    }
]);

//15.
//Obtener los datos de los clientes que realizaron al menos un alquiler.
use("firstdb");
db.getCollection("alquiler").aggregate([
    {
        $group: {
          _id: "$ID_cliente",
          alquileres: {$sum:1}
          
        }
    },
    {
        $match: {
          alquileres: { $gte: 1 }
        }
      },
      {
        $lookup: {
          from: ("cliente"),
          localField: "_id",
          foreignField: "ID_cliente",
          as: "clientes"
        }
      },
      {
        $project: {
          "clientes._id":0
        }
      }
]);

//16.
//Listar todos los automóviles ordenados por marca y modelo.
use("firstdb");
db.automovil.find({},{
    _id:0,
    ID_automovil:0,
    Anio:0,
    Tipo:0,
    Capacidad:0
});

//17.
//Mostrar la cantidad total de automóviles en cada sucursal junto  con su dirección.
use("firstdb");
db.getCollection("sucursal").aggregate([  
    {    
        $lookup: {      
            from: "sucursal_automovil",     
            localField: "ID_Sucursal",      
            foreignField: "ID_Sucursal",      
            as: "Cantidad_Automovil"   
         }  
    },  
    {
        $match: {CantididadAutomovil: { $ne: [] }}
    },
    {
        $unwind: "$Cantidad_Automovil"
    },
    {    
        $project: {     
            "Cantidad_Automovil.sucursal_id": 0,
            "Cantidad_Automovil.automovil_id": 0
        } 
    },
    {
        $group: {
            _id: "$_id",
            Nombre: {
                $first: "$Nombre"
            },
            Direccion: {
                $first: "$Direccion"
            },
            Total_Automoviles: {
                $sum: "$Cantidad_Automovil.Cantidad_Disponible"
            }
        }
    }
]);


//18.
// Obtener la cantidad total de alquileres registrados en la base de datos.
use("firstdb");
db.alquiler.aggregate([  
    {
        $set: { total_alquileres: db.alquiler.countDocuments({}) }
    },
    {
        $group: {
            _id: null,
            total_alquileres: {
                $first: "$total_alquileres"
            }
        }
    },
    {    
        $project: {     
            "_id": 0
        } 
    }
]);


// 19.
// Mostrar los automóviles con capacidad igual a 5 personas y que estén disponibles
use("firstdb");
db.getCollection("automovil").aggregate([  
    {    
        $lookup: {      
            from: ("alquiler"),     
            localField: "ID_automovil",      
            foreignField: "ID_automovil",      
            as: "Alquileres"   
         }  
    },  
    {
        $match: {Capacidad: {$gte: 5}}
    },
    {
        $match: {"Alquileres.Estado":"vencido"}
    },

    {
        $project: {
            _id:0,
            ID_automovil:1,
            Marca:1,
            Modelo:1,
            Anio:1,
            Capacidad:1,
            "Alquileres.Estado":1
        }
    }
]);


//20.
//Obtener los datos del cliente que realizó la reserva con ID_Reserva específico.
use("firstdb");
db.getCollection("reserva").aggregate([  
    {    
        $lookup: {      
            from: "cliente",     
            localField: "ID_Cliente",      
            foreignField: "ID_cliente",      
            as: "data_Cliente"   
         }  
    },  
    {
        $match: {ID_Reserva:1}
    },
    {
        $project: {
          _id:0
        }
    }
    
]);


//21.
//Listar los alquileres con fecha de inicio entre '2023-07-05' y '2023-07-10'.
use("firstdb");
db.alquiler.find({
    Fecha_Inicio: {
      $gte: new Date("2023-07-05"),
      $lte: new Date("2023-07-10")
    }
  });